C51 COMPILER V9.60.7.0   ADUC834                                                           05/15/2023 01:00:07 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE ADUC834
OBJECT MODULE PLACED IN .\Objects\aduc834.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE aduc834.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\a
                    -duc834.lst) TABS(2) OBJECT(.\Objects\aduc834.obj)

line level    source

   1          
   2          /* a header with definitions of symbols for ADuC834 */
   3          #include <aduc834.h>
   4          #include <lab2_board.h>
   5          #include <lcd_comm.h>
   6          /* a millisecond system timer */
   7          volatile long int system_timer;
   8          
   9          extern void LCD_DelayMs (uint16_t ms_cnt);
  10          
  11          
  12          
  13          void IsrTimer2 (void) interrupt 5
  14          {
  15   1       system_timer++;
  16   1       TF2 = 0;
  17   1      }
  18          
  19          /*Listing 2*/
  20          void Timer2Init (void)
  21          {
  22   1      /******************************************** 
  23   1      TODO:
  24   1       configure the Timer 2 to overflow each 1 ms, 
  25   1       use the mode with automatic reload
  26   1      *********************************************/
  27   1        TL2 = 0xF0;
  28   1        TH2 = 0xD1;
  29   1        ET2=1;
  30   1        EA=1;
  31   1        TR2=1;
  32   1      
  33   1      }
  34          
  35          void StateInitialize(void);
  36          void StateIdle(void);
  37          void StateSetTimeout(void);
  38          void StateCountdown(void);
  39          
  40          
  41          /* an array of pointers to state functions */
  42          void (*state_array[])() = {StateInitialize, StateIdle,
  43          StateSetTimeout, StateCountdown};
  44          /* a definition of an enumerated type 
  45           used for indexing the state_array */
  46          typedef enum {ST_INITIALIZE, ST_IDLE, ST_SET_TIMEOUT, ST_COUNTDOWN}
  47          state_name_t;
  48          /* a variable specifying the current state */
  49          state_name_t current_state;
  50          
  51          /* timeout for the countdown value in milliseconds */
  52          static long int timeout_set;
  53          void StateInitialize (void)
  54          {
C51 COMPILER V9.60.7.0   ADUC834                                                           05/15/2023 01:00:07 PAGE 2   

  55   1      /* set the LCD backlight to violet */ 
  56   1      PORT_LCD_LED &= ~((1 << LCD_RED) | (1 << LCD_BLUE)); 
  57   1      Timer2Init();
  58   1      /*InterruptsInit();
  59   1      LCD_Init();
  60   1      /******************************************** 
  61   1      TODO:
  62   1      1. call the ADC initialization function
  63   1      2. display a message that the application is initializing
  64   1      3. wait 3 seconds
  65   1      *********************************************/
  66   1       /* transition to the next state occurs after calling
  67   1       its function for the first time */
  68   1        LCD_SendString("Hang tight! Initializing State Machine... ");
  69   1      if (P2&(1<<1))==0{
*** ERROR C141 IN LINE 69 OF aduc834.c: syntax error near '==', expected '__asm'
*** ERROR C141 IN LINE 69 OF aduc834.c: syntax error near '{', expected ';'
  70   2       StateIdle();
  71   2      }
  72   1      
  73   1      }
  74          
  75          
  76          void StateIdle (void)
  77          { 
  78   1       /* check for entry */
  79   1       if (current_state != ST_IDLE)
  80   1       {
  81   2       current_state = ST_IDLE;
  82   2       
  83   2      /******************************************** 
  84   2      TODO:
  85   2      1. display the menu
  86   2      2. set the LCD backlight to green
  87   2      *********************************************/
  88   2       
  89   2       return;
  90   2       }
  91   1       
  92   1       if (BUTTON1_CHK)
  93   1       {
  94   2       StateSetTimeout();
  95   2       
  96   2       } else if (BUTTON2_CHK)
  97   1       {
  98   2       StateCountdown();
  99   2       }
 100   1      }
 101          
 102          
 103          void StateCountdown (void)
 104          {
 105   1       static long int time_start, time_1s_ref;
 106   1       
 107   1       /* check for entry */
 108   1       if (current_state != ST_COUNTDOWN)
 109   1       {
 110   2       current_state = ST_COUNTDOWN;
 111   2       
 112   2       /* store the value of the system timer 
 113   2       from which the countdown begins */
 114   2       time_start = system_timer;
C51 COMPILER V9.60.7.0   ADUC834                                                           05/15/2023 01:00:07 PAGE 3   

 115   2       /* a reference for 1-sec timeouts */
 116   2       time_1s_ref = time_start;
 117   2       return;
 118   2       } 
 119   1      /******************************************** 
 120   1      TODO:
 121   1      1. conditionally transit to the idle state
 122   1       when the button C is pressed
 123   1      2. display the information on how to return to the menu
 124   1      3. set the LCD backlight to turquoise
 125   1      *********************************************/ 
 126   1       /* check if a 1-sec timeout expired 
 127   1       (used for 1 Hz display update) */
 128   1       if (system_timer - time_1s_ref > 1000)
 129   1       { 
 130   2       time_1s_ref += 1000;
 131   2      /******************************************** 
 132   2      TODO:
 133   2       display the remaining time (after each 1 second)
 134   2      *********************************************/ 
 135   2       }
 136   1       /* check if the timeout expired */
 137   1       if (system_timer - time_start > timeout_set)
 138   1       { 
 139   2       StateIdle(); 
 140   2       }
 141   1      } 
 142          void StateSetTimeout (void)
 143          {
 144   1      /********************************************
 145   1        TODO: 
 146   1      Implement the timeout adjustment:
 147   1      1. on entry, set the current state to ST_SET_TIMEOUT
 148   1      2. change the „timeout_set” variable value in the range 
 149   1       from 1000 to 20000 milliseconds based on the readings 
 150   1       from the ADC channel connected to the potentiometer
 151   1      3. when the user presses the C button,
 152   1       transit to the idle state
 153   1      *********************************************/
 154   1      }
 155          
 156          int main (void)
 157          {
 158   1       current_state = ST_INITIALIZE;
 159   1       while (1)
 160   1       {
 161   2       /* current state function is executed from the 
 162   2       state function array */
 163   2       state_array[current_state]();
*** ERROR C211 IN LINE 163 OF aduc834.c: call not to a function
 164   2       }
 165   1      }
 166          
 167          

C51 COMPILATION COMPLETE.  0 WARNING(S),  3 ERROR(S)
